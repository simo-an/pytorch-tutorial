import torch
'''
    1. pytorch commen method
'''

###### cat and stack #####

t1=torch.Tensor([[1,1,1,1],[2,2,2,2]])
t2=torch.Tensor([[3,3,3,3],[4,4,4,4]])

# t1.shape = [2, 4]
t3 = torch.cat((t1 ,t2), dim=0)
'''
dim = 0 第0维进行拼接 
即：[[1,1,1,1],[2,2,2,2]] 与 [[3,3,3,3],[4,4,4,4]] 拼接
=> [[1,1,1,1],[2,2,2,2], [3,3,3,3],[4,4,4,4]]

dim = 1 第1维进行拼接 
即：[1,1,1,1] 与 [3,3,3,3]  [2,2,2,2] 与 [4,4,4,4] 拼接
=> [[1,1,1,1,3,3,3,3],[2,2,2,2,4,4,4,4]]
'''

t4 = torch.stack((t1, t2), dim=1)
'''
相比较 cat 其会先扩展一维在拼接
dim = 0 第0维进行拼接 
即：[[1,1,1,1],[2,2,2,2]] 与 [[3,3,3,3],[4,4,4,4]] 
扩展 => [[[1,1,1,1],[2,2,2,2]]] 与 [[[1,1,1,1],[2,2,2,2]]]
=> [[[1,1,1,1],[2,2,2,2]],[[1,1,1,1],[2,2,2,2]]]

dim = 1 第三维进行拼接 
即：[1,1,1,1] 与 [3,3,3,3]  [2,2,2,2] 与 [4,4,4,4]
扩展 => [[1,1,1,1]] 与 [[3,3,3,3]]  [[2,2,2,2]] 与 [[4,4,4,4]]
=> [[[1,1,1,1],[3,3,3,3]], [[2,2,2,2],[4,4,4,4]]]
'''
